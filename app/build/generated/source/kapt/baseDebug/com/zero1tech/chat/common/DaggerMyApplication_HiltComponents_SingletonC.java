// Generated by Dagger (https://dagger.dev).
package com.zero1tech.chat.common;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.app.di.AnalyticsModule;
import com.app.di.AnalyticsModule_ProvideAnalyticsDispatchersFactory;
import com.app.di.AppModule;
import com.app.di.AppModule_ApiServiceFactory;
import com.app.di.AppModule_GetRetrofitFactory;
import com.app.di.DataModule;
import com.app.di.DataModule_ProvideApplicationScopeFactory;
import com.app.di.DataModule_ProvideDatabaseFactory;
import com.app.di.DataModule_ProvideMoshiFactory;
import com.app.di.DataModule_ProvidePrefsFactory;
import com.app.di.DataModule_ProvideSharedPreferencesFactory;
import com.app.di.DataModule_ProvideUserDaoFactory;
import com.app.di.FirebaseModule;
import com.app.di.FirebaseModule_ProvideFirebaseAnalyticsFactory;
import com.app.di.FirebaseModule_ProvideFirebaseCrashlyticsFactory;
import com.app.di.FirebaseModule_ProvideStorageRefFactory;
import com.app.di.FirebaseModule_ProviderDatabaseReferenceFactory;
import com.app.di.FirebaseModule_ProviderFirebaseDatabaseFactory;
import com.app.di.NetworkModule;
import com.app.di.NetworkModule_GetRetrofitFactory;
import com.app.di.NetworkModule_GptServiceFactory;
import com.app.di.room.UserDao;
import com.app.di.room.UserDataBase;
import com.example.data.datasource.ChatDataSource;
import com.example.data.datasource.FriendsDataSource;
import com.example.data.datasource.MainDataSource;
import com.example.data.datasource.PeopleDataSource;
import com.example.data.datasource.PostDataSource;
import com.example.data.datasource.RequestDataSource;
import com.example.data.datasource.RoomDataSource;
import com.example.data.gpt.GptDataSource;
import com.example.data.network.moshi.MoshiAdapter;
import com.example.data.network.moshi.date.DateAdapter;
import com.example.data.notification.ApiService;
import com.example.data.prefs.Prefs;
import com.example.data.repoistory.chat.ChatRepository;
import com.example.data.repoistory.contactus.ContactUsRepository;
import com.example.data.repoistory.dialogregister.DialogRegisterRepository;
import com.example.data.repoistory.friends.FriendsRepository;
import com.example.data.repoistory.main.MainRepository;
import com.example.data.repoistory.openai.OpenaiRepository;
import com.example.data.repoistory.people.PeopleRepository;
import com.example.data.repoistory.post.PostRepository;
import com.example.data.repoistory.request.RequestRepository;
import com.example.data.repoistory.room.RoomRepo;
import com.example.data.repoistory.splash.FirebaseSettingsDataSource;
import com.example.data.repoistory.splash.LocalSettingsDataSource;
import com.example.data.repoistory.splash.SplashRepository;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.analytics.FirebaseAnalytics;
import com.google.firebase.crashlytics.FirebaseCrashlytics;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.storage.StorageReference;
import com.squareup.moshi.Moshi;
import com.zero1tech.chat.AnalyticsDispatcher;
import com.zero1tech.chat.adapters.AnalyticsAdapter;
import com.zero1tech.chat.adapters.FirebaseAnalyticsAdapter;
import com.zero1tech.chat.base.BaseFragment_MembersInjector;
import com.zero1tech.chat.notifications.MyFirebaseIdService;
import com.zero1tech.chat.notifications.MyFirebaseIdService_MembersInjector;
import com.zero1tech.chat.ui.chat.friend.ChatFragment;
import com.zero1tech.chat.ui.chat.friend.ChatFragment_MembersInjector;
import com.zero1tech.chat.ui.chat.friend.ChatViewModel;
import com.zero1tech.chat.ui.chat.friend.ChatViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.chat.gpt.completion.ChatBotFragment;
import com.zero1tech.chat.ui.chat.gpt.completion.ChatBotFragment_MembersInjector;
import com.zero1tech.chat.ui.chat.gpt.completion.ChatBotViewModel;
import com.zero1tech.chat.ui.chat.gpt.completion.ChatBotViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.chat.gpt.images.ImagesBotFragment;
import com.zero1tech.chat.ui.chat.gpt.images.ImagesBotFragment_MembersInjector;
import com.zero1tech.chat.ui.chat.gpt.images.ImagesBotViewModel;
import com.zero1tech.chat.ui.chat.gpt.images.ImagesBotViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.dialog.DialogViewModel;
import com.zero1tech.chat.ui.dialog.DialogViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.dialog.InfoDialog;
import com.zero1tech.chat.ui.dialog.InfoDialog_MembersInjector;
import com.zero1tech.chat.ui.friends.FriendsFragment;
import com.zero1tech.chat.ui.friends.FriendsFragment_MembersInjector;
import com.zero1tech.chat.ui.friends.FriendsViewModel;
import com.zero1tech.chat.ui.friends.FriendsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.friends.request.RequestFragment;
import com.zero1tech.chat.ui.friends.request.RequestViewModel;
import com.zero1tech.chat.ui.friends.request.RequestViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.main.MainActivity;
import com.zero1tech.chat.ui.main.MainActivity_MembersInjector;
import com.zero1tech.chat.ui.main.MainViewModel;
import com.zero1tech.chat.ui.main.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.people.PeopleFragment;
import com.zero1tech.chat.ui.people.PeopleFragment_MembersInjector;
import com.zero1tech.chat.ui.people.PeopleViewModel;
import com.zero1tech.chat.ui.people.PeopleViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.people.search.SearchPeopleFragment;
import com.zero1tech.chat.ui.post.AddPostFragment;
import com.zero1tech.chat.ui.post.AddPostFragment_MembersInjector;
import com.zero1tech.chat.ui.post.PostFragment;
import com.zero1tech.chat.ui.post.PostFragment_MembersInjector;
import com.zero1tech.chat.ui.post.PostHiddenFragment;
import com.zero1tech.chat.ui.post.PostHiddenFragment_MembersInjector;
import com.zero1tech.chat.ui.post.PostViewModel;
import com.zero1tech.chat.ui.post.PostViewModel_Factory;
import com.zero1tech.chat.ui.post.PostViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.post.PostViewModel_MembersInjector;
import com.zero1tech.chat.ui.room.RoomFragment;
import com.zero1tech.chat.ui.room.RoomFragment_MembersInjector;
import com.zero1tech.chat.ui.room.RoomViewModel;
import com.zero1tech.chat.ui.room.RoomViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.room.chat.RoomChatFragment;
import com.zero1tech.chat.ui.room.chat.RoomChatFragment_MembersInjector;
import com.zero1tech.chat.ui.room.chat.RoomChatViewModel;
import com.zero1tech.chat.ui.room.chat.RoomChatViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.room.roomdialog.ConfirmDialog;
import com.zero1tech.chat.ui.room.roomdialog.ConfirmDialog_MembersInjector;
import com.zero1tech.chat.ui.room.roomdialog.CreateRoomDialog;
import com.zero1tech.chat.ui.room.roomdialog.CreateRoomDialog_MembersInjector;
import com.zero1tech.chat.ui.setting.SettingsFragment;
import com.zero1tech.chat.ui.setting.SettingsFragment_MembersInjector;
import com.zero1tech.chat.ui.setting.about.AboutFragment;
import com.zero1tech.chat.ui.setting.contactus.ContactUsFragment;
import com.zero1tech.chat.ui.setting.contactus.ContactUsViewModel;
import com.zero1tech.chat.ui.setting.contactus.ContactUsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.setting.updateprofiledialog.UpdateProfileFragment;
import com.zero1tech.chat.ui.setting.updateprofiledialog.UpdateProfileFragment_MembersInjector;
import com.zero1tech.chat.ui.splash.SplashFragment;
import com.zero1tech.chat.ui.splash.SplashFragment_MembersInjector;
import com.zero1tech.chat.ui.splash.SplashViewModel;
import com.zero1tech.chat.ui.splash.SplashViewModel_HiltModules_KeyModule_ProvideFactory;
import com.zero1tech.chat.ui.splash.update.ForceUpdateFragment;
import com.zero1tech.chat.ui.splash.update.ForceUpdateFragment_MembersInjector;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApplication_HiltComponents_SingletonC extends MyApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerMyApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<DateAdapter> dateAdapterProvider;

  private Provider<Moshi> provideMoshiProvider;

  private Provider<Prefs> providePrefsProvider;

  private Provider<FirebaseAnalytics> provideFirebaseAnalyticsProvider;

  private Provider<FirebaseCrashlytics> provideFirebaseCrashlyticsProvider;

  private Provider<FirebaseAnalyticsAdapter> firebaseAnalyticsAdapterProvider;

  private Provider<AnalyticsDispatcher> provideAnalyticsDispatchersProvider;

  private Provider<FirebaseDatabase> providerFirebaseDatabaseProvider;

  private Provider<Retrofit> getRetrofitProvider;

  private Provider<ApiService> apiServiceProvider;

  private Provider<ChatDataSource> chatDataSourceProvider;

  private Provider<ChatRepository> chatRepositoryProvider;

  private Provider<Retrofit> getRetrofitProvider2;

  private Provider<GptDataSource> GptServiceProvider;

  private Provider<OpenaiRepository> openaiRepositoryProvider;

  private Provider<ContactUsRepository> contactUsRepositoryProvider;

  private Provider<DatabaseReference> providerDatabaseReferenceProvider;

  private Provider<DialogRegisterRepository> dialogRegisterRepositoryProvider;

  private Provider<FriendsRepository> friendsRepositoryProvider;

  private Provider<StorageReference> provideStorageRefProvider;

  private Provider<MainRepository> mainRepositoryProvider;

  private Provider<PeopleDataSource> peopleDataSourceProvider;

  private Provider<PeopleRepository> peopleRepositoryProvider;

  private Provider<UserDataBase> provideDatabaseProvider;

  private Provider<CoroutineScope> provideApplicationScopeProvider;

  private Provider<RequestRepository> requestRepositoryProvider;

  private Provider<RoomRepo> roomRepoProvider;

  private Provider<FirebaseSettingsDataSource> firebaseSettingsDataSourceProvider;

  private Provider<LocalSettingsDataSource> localSettingsDataSourceProvider;

  private Provider<SplashRepository> splashRepositoryProvider;

  private DaggerMyApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private Set<MoshiAdapter> setOfMoshiAdapter() {
    return ImmutableSet.<MoshiAdapter>of(dateAdapterProvider.get());
  }

  private Set<AnalyticsAdapter> setOfAnalyticsAdapter() {
    return ImmutableSet.<AnalyticsAdapter>of(firebaseAnalyticsAdapterProvider.get());
  }

  private FriendsDataSource friendsDataSource() {
    return new FriendsDataSource(providerFirebaseDatabaseProvider.get(), providePrefsProvider.get());
  }

  private MainDataSource mainDataSource() {
    return new MainDataSource(providerFirebaseDatabaseProvider.get(), providePrefsProvider.get(), provideStorageRefProvider.get());
  }

  private UserDataBase.Callback callback() {
    return new UserDataBase.Callback(provideDatabaseProvider, provideApplicationScopeProvider.get());
  }

  private UserDao userDao() {
    return DataModule_ProvideUserDaoFactory.provideUserDao(provideDatabaseProvider.get());
  }

  private RequestDataSource requestDataSource() {
    return new RequestDataSource(providerFirebaseDatabaseProvider.get(), providePrefsProvider.get());
  }

  private RoomDataSource roomDataSource() {
    return new RoomDataSource(providerFirebaseDatabaseProvider.get(), providePrefsProvider.get(), provideStorageRefProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.provideSharedPreferencesProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonC, 1));
    this.dateAdapterProvider = DoubleCheck.provider(new SwitchingProvider<DateAdapter>(singletonC, 3));
    this.provideMoshiProvider = DoubleCheck.provider(new SwitchingProvider<Moshi>(singletonC, 2));
    this.providePrefsProvider = DoubleCheck.provider(new SwitchingProvider<Prefs>(singletonC, 0));
    this.provideFirebaseAnalyticsProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseAnalytics>(singletonC, 6));
    this.provideFirebaseCrashlyticsProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseCrashlytics>(singletonC, 7));
    this.firebaseAnalyticsAdapterProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseAnalyticsAdapter>(singletonC, 5));
    this.provideAnalyticsDispatchersProvider = DoubleCheck.provider(new SwitchingProvider<AnalyticsDispatcher>(singletonC, 4));
    this.providerFirebaseDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseDatabase>(singletonC, 10));
    this.getRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 12));
    this.apiServiceProvider = DoubleCheck.provider(new SwitchingProvider<ApiService>(singletonC, 11));
    this.chatDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<ChatDataSource>(singletonC, 9));
    this.chatRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ChatRepository>(singletonC, 8));
    this.getRetrofitProvider2 = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 15));
    this.GptServiceProvider = DoubleCheck.provider(new SwitchingProvider<GptDataSource>(singletonC, 14));
    this.openaiRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<OpenaiRepository>(singletonC, 13));
    this.contactUsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ContactUsRepository>(singletonC, 16));
    this.providerDatabaseReferenceProvider = DoubleCheck.provider(new SwitchingProvider<DatabaseReference>(singletonC, 18));
    this.dialogRegisterRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<DialogRegisterRepository>(singletonC, 17));
    this.friendsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<FriendsRepository>(singletonC, 19));
    this.provideStorageRefProvider = DoubleCheck.provider(new SwitchingProvider<StorageReference>(singletonC, 21));
    this.mainRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<MainRepository>(singletonC, 20));
    this.peopleDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<PeopleDataSource>(singletonC, 23));
    this.peopleRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<PeopleRepository>(singletonC, 22));
    this.provideApplicationScopeProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineScope>(singletonC, 25));
    this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<UserDataBase>(singletonC, 24));
    this.requestRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<RequestRepository>(singletonC, 26));
    this.roomRepoProvider = DoubleCheck.provider(new SwitchingProvider<RoomRepo>(singletonC, 27));
    this.firebaseSettingsDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseSettingsDataSource>(singletonC, 29));
    this.localSettingsDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<LocalSettingsDataSource>(singletonC, 30));
    this.splashRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<SplashRepository>(singletonC, 28));
  }

  @Override
  public void injectMyApplication(MyApplication myApplication) {
    injectMyApplication2(myApplication);
  }

  @Override
  public Set<Boolean> getDisableFragmentGetContextFix() {
    return ImmutableSet.<Boolean>of();
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @CanIgnoreReturnValue
  private MyApplication injectMyApplication2(MyApplication instance) {
    MyApplication_MembersInjector.injectPrefs(instance, providePrefsProvider.get());
    MyApplication_MembersInjector.injectAnalyticsDispatcher(instance, provideAnalyticsDispatchersProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder analyticsModule(AnalyticsModule analyticsModule) {
      Preconditions.checkNotNull(analyticsModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder dataModule(DataModule dataModule) {
      Preconditions.checkNotNull(dataModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder firebaseModule(FirebaseModule firebaseModule) {
      Preconditions.checkNotNull(firebaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public MyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerMyApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements MyApplication_HiltComponents.ActivityC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApplication_HiltComponents.FragmentC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApplication_HiltComponents.ViewC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MyApplication_HiltComponents.ServiceC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApplication_HiltComponents.FragmentC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectChatFragment(ChatFragment chatFragment) {
      injectChatFragment2(chatFragment);
    }

    @Override
    public void injectChatBotFragment(ChatBotFragment chatBotFragment) {
      injectChatBotFragment2(chatBotFragment);
    }

    @Override
    public void injectImagesBotFragment(ImagesBotFragment imagesBotFragment) {
      injectImagesBotFragment2(imagesBotFragment);
    }

    @Override
    public void injectInfoDialog(InfoDialog infoDialog) {
      injectInfoDialog2(infoDialog);
    }

    @Override
    public void injectFriendsFragment(FriendsFragment friendsFragment) {
      injectFriendsFragment2(friendsFragment);
    }

    @Override
    public void injectRequestFragment(RequestFragment requestFragment) {
      injectRequestFragment2(requestFragment);
    }

    @Override
    public void injectPeopleFragment(PeopleFragment peopleFragment) {
      injectPeopleFragment2(peopleFragment);
    }

    @Override
    public void injectSearchPeopleFragment(SearchPeopleFragment searchPeopleFragment) {
      injectSearchPeopleFragment2(searchPeopleFragment);
    }

    @Override
    public void injectAddPostFragment(AddPostFragment addPostFragment) {
      injectAddPostFragment2(addPostFragment);
    }

    @Override
    public void injectPostFragment(PostFragment postFragment) {
      injectPostFragment2(postFragment);
    }

    @Override
    public void injectPostHiddenFragment(PostHiddenFragment postHiddenFragment) {
      injectPostHiddenFragment2(postHiddenFragment);
    }

    @Override
    public void injectRoomFragment(RoomFragment roomFragment) {
      injectRoomFragment2(roomFragment);
    }

    @Override
    public void injectRoomChatFragment(RoomChatFragment roomChatFragment) {
      injectRoomChatFragment2(roomChatFragment);
    }

    @Override
    public void injectConfirmDialog(ConfirmDialog confirmDialog) {
      injectConfirmDialog2(confirmDialog);
    }

    @Override
    public void injectCreateRoomDialog(CreateRoomDialog createRoomDialog) {
      injectCreateRoomDialog2(createRoomDialog);
    }

    @Override
    public void injectSettingsFragment(SettingsFragment settingsFragment) {
      injectSettingsFragment2(settingsFragment);
    }

    @Override
    public void injectAboutFragment(AboutFragment aboutFragment) {
      injectAboutFragment2(aboutFragment);
    }

    @Override
    public void injectContactUsFragment(ContactUsFragment contactUsFragment) {
    }

    @Override
    public void injectUpdateProfileFragment(UpdateProfileFragment updateProfileFragment) {
      injectUpdateProfileFragment2(updateProfileFragment);
    }

    @Override
    public void injectSplashFragment(SplashFragment splashFragment) {
      injectSplashFragment2(splashFragment);
    }

    @Override
    public void injectForceUpdateFragment(ForceUpdateFragment forceUpdateFragment) {
      injectForceUpdateFragment2(forceUpdateFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @CanIgnoreReturnValue
    private ChatFragment injectChatFragment2(ChatFragment instance) {
      ChatFragment_MembersInjector.injectAnalyticsDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      ChatFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ChatBotFragment injectChatBotFragment2(ChatBotFragment instance) {
      ChatBotFragment_MembersInjector.injectAnalyticsDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      ChatBotFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ImagesBotFragment injectImagesBotFragment2(ImagesBotFragment instance) {
      ImagesBotFragment_MembersInjector.injectAnalyticsDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      ImagesBotFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private InfoDialog injectInfoDialog2(InfoDialog instance) {
      InfoDialog_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private FriendsFragment injectFriendsFragment2(FriendsFragment instance) {
      BaseFragment_MembersInjector.injectDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      FriendsFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private RequestFragment injectRequestFragment2(RequestFragment instance) {
      BaseFragment_MembersInjector.injectDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private PeopleFragment injectPeopleFragment2(PeopleFragment instance) {
      BaseFragment_MembersInjector.injectDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      PeopleFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SearchPeopleFragment injectSearchPeopleFragment2(SearchPeopleFragment instance) {
      BaseFragment_MembersInjector.injectDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private AddPostFragment injectAddPostFragment2(AddPostFragment instance) {
      AddPostFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private PostFragment injectPostFragment2(PostFragment instance) {
      PostFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private PostHiddenFragment injectPostHiddenFragment2(PostHiddenFragment instance) {
      PostHiddenFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private RoomFragment injectRoomFragment2(RoomFragment instance) {
      RoomFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private RoomChatFragment injectRoomChatFragment2(RoomChatFragment instance) {
      RoomChatFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ConfirmDialog injectConfirmDialog2(ConfirmDialog instance) {
      ConfirmDialog_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private CreateRoomDialog injectCreateRoomDialog2(CreateRoomDialog instance) {
      CreateRoomDialog_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SettingsFragment injectSettingsFragment2(SettingsFragment instance) {
      SettingsFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private AboutFragment injectAboutFragment2(AboutFragment instance) {
      BaseFragment_MembersInjector.injectDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private UpdateProfileFragment injectUpdateProfileFragment2(UpdateProfileFragment instance) {
      BaseFragment_MembersInjector.injectDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      UpdateProfileFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SplashFragment injectSplashFragment2(SplashFragment instance) {
      BaseFragment_MembersInjector.injectDispatcher(instance, singletonC.provideAnalyticsDispatchersProvider.get());
      SplashFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ForceUpdateFragment injectForceUpdateFragment2(ForceUpdateFragment instance) {
      ForceUpdateFragment_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends MyApplication_HiltComponents.ViewC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApplication_HiltComponents.ActivityC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(ChatBotViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ChatViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ContactUsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DialogViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FriendsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ImagesBotViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MainViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PeopleViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PostViewModel_HiltModules_KeyModule_ProvideFactory.provide(), RequestViewModel_HiltModules_KeyModule_ProvideFactory.provide(), RoomChatViewModel_HiltModules_KeyModule_ProvideFactory.provide(), RoomViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SplashViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      MainActivity_MembersInjector.injectSharedPreferences(instance, singletonC.provideSharedPreferencesProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends MyApplication_HiltComponents.ViewModelC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ChatBotViewModel> chatBotViewModelProvider;

    private Provider<ChatViewModel> chatViewModelProvider;

    private Provider<ContactUsViewModel> contactUsViewModelProvider;

    private Provider<DialogViewModel> dialogViewModelProvider;

    private Provider<FriendsViewModel> friendsViewModelProvider;

    private Provider<ImagesBotViewModel> imagesBotViewModelProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private Provider<PeopleViewModel> peopleViewModelProvider;

    private Provider<PostViewModel> postViewModelProvider;

    private Provider<RequestViewModel> requestViewModelProvider;

    private Provider<RoomChatViewModel> roomChatViewModelProvider;

    private Provider<RoomViewModel> roomViewModelProvider;

    private Provider<SplashViewModel> splashViewModelProvider;

    private ViewModelCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private PostDataSource postDataSource() {
      return new PostDataSource(singletonC.providerDatabaseReferenceProvider.get());
    }

    private PostRepository postRepository() {
      return new PostRepository(postDataSource());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.chatBotViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.chatViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.contactUsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.dialogViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.friendsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.imagesBotViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
      this.mainViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 6);
      this.peopleViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 7);
      this.postViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 8);
      this.requestViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 9);
      this.roomChatViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 10);
      this.roomViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 11);
      this.splashViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 12);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(13).put("com.zero1tech.chat.ui.chat.gpt.completion.ChatBotViewModel", ((Provider) chatBotViewModelProvider)).put("com.zero1tech.chat.ui.chat.friend.ChatViewModel", ((Provider) chatViewModelProvider)).put("com.zero1tech.chat.ui.setting.contactus.ContactUsViewModel", ((Provider) contactUsViewModelProvider)).put("com.zero1tech.chat.ui.dialog.DialogViewModel", ((Provider) dialogViewModelProvider)).put("com.zero1tech.chat.ui.friends.FriendsViewModel", ((Provider) friendsViewModelProvider)).put("com.zero1tech.chat.ui.chat.gpt.images.ImagesBotViewModel", ((Provider) imagesBotViewModelProvider)).put("com.zero1tech.chat.ui.main.MainViewModel", ((Provider) mainViewModelProvider)).put("com.zero1tech.chat.ui.people.PeopleViewModel", ((Provider) peopleViewModelProvider)).put("com.zero1tech.chat.ui.post.PostViewModel", ((Provider) postViewModelProvider)).put("com.zero1tech.chat.ui.friends.request.RequestViewModel", ((Provider) requestViewModelProvider)).put("com.zero1tech.chat.ui.room.chat.RoomChatViewModel", ((Provider) roomChatViewModelProvider)).put("com.zero1tech.chat.ui.room.RoomViewModel", ((Provider) roomViewModelProvider)).put("com.zero1tech.chat.ui.splash.SplashViewModel", ((Provider) splashViewModelProvider)).build();
    }

    @CanIgnoreReturnValue
    private PostViewModel injectPostViewModel(PostViewModel instance) {
      PostViewModel_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerMyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.zero1tech.chat.ui.chat.gpt.completion.ChatBotViewModel 
          return (T) new ChatBotViewModel(singletonC.chatRepositoryProvider.get(), singletonC.openaiRepositoryProvider.get());

          case 1: // com.zero1tech.chat.ui.chat.friend.ChatViewModel 
          return (T) new ChatViewModel(singletonC.chatRepositoryProvider.get());

          case 2: // com.zero1tech.chat.ui.setting.contactus.ContactUsViewModel 
          return (T) new ContactUsViewModel(singletonC.contactUsRepositoryProvider.get());

          case 3: // com.zero1tech.chat.ui.dialog.DialogViewModel 
          return (T) new DialogViewModel(singletonC.dialogRegisterRepositoryProvider.get());

          case 4: // com.zero1tech.chat.ui.friends.FriendsViewModel 
          return (T) new FriendsViewModel(singletonC.friendsRepositoryProvider.get());

          case 5: // com.zero1tech.chat.ui.chat.gpt.images.ImagesBotViewModel 
          return (T) new ImagesBotViewModel(singletonC.chatRepositoryProvider.get(), singletonC.openaiRepositoryProvider.get());

          case 6: // com.zero1tech.chat.ui.main.MainViewModel 
          return (T) new MainViewModel(singletonC.mainRepositoryProvider.get(), singletonC.providePrefsProvider.get());

          case 7: // com.zero1tech.chat.ui.people.PeopleViewModel 
          return (T) new PeopleViewModel(singletonC.peopleRepositoryProvider.get(), singletonC.userDao());

          case 8: // com.zero1tech.chat.ui.post.PostViewModel 
          return (T) viewModelCImpl.injectPostViewModel(PostViewModel_Factory.newInstance(viewModelCImpl.postRepository()));

          case 9: // com.zero1tech.chat.ui.friends.request.RequestViewModel 
          return (T) new RequestViewModel(singletonC.requestRepositoryProvider.get());

          case 10: // com.zero1tech.chat.ui.room.chat.RoomChatViewModel 
          return (T) new RoomChatViewModel(singletonC.roomRepoProvider.get());

          case 11: // com.zero1tech.chat.ui.room.RoomViewModel 
          return (T) new RoomViewModel(singletonC.roomRepoProvider.get());

          case 12: // com.zero1tech.chat.ui.splash.SplashViewModel 
          return (T) new SplashViewModel(singletonC.splashRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MyApplication_HiltComponents.ActivityRetainedC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerMyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApplication_HiltComponents.ServiceC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }

    @Override
    public void injectMyFirebaseIdService(MyFirebaseIdService myFirebaseIdService) {
      injectMyFirebaseIdService2(myFirebaseIdService);
    }

    @CanIgnoreReturnValue
    private MyFirebaseIdService injectMyFirebaseIdService2(MyFirebaseIdService instance) {
      MyFirebaseIdService_MembersInjector.injectPrefs(instance, singletonC.providePrefsProvider.get());
      return instance;
    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerMyApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.example.data.prefs.Prefs 
        return (T) DataModule_ProvidePrefsFactory.providePrefs(singletonC.provideSharedPreferencesProvider.get(), singletonC.provideMoshiProvider.get());

        case 1: // android.content.SharedPreferences 
        return (T) DataModule_ProvideSharedPreferencesFactory.provideSharedPreferences(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 2: // com.squareup.moshi.Moshi 
        return (T) DataModule_ProvideMoshiFactory.provideMoshi(singletonC.setOfMoshiAdapter());

        case 3: // com.example.data.network.moshi.date.DateAdapter 
        return (T) new DateAdapter();

        case 4: // com.zero1tech.chat.AnalyticsDispatcher 
        return (T) AnalyticsModule_ProvideAnalyticsDispatchersFactory.provideAnalyticsDispatchers(singletonC.setOfAnalyticsAdapter());

        case 5: // com.zero1tech.chat.adapters.FirebaseAnalyticsAdapter 
        return (T) new FirebaseAnalyticsAdapter(singletonC.provideFirebaseAnalyticsProvider.get(), singletonC.provideFirebaseCrashlyticsProvider.get());

        case 6: // com.google.firebase.analytics.FirebaseAnalytics 
        return (T) FirebaseModule_ProvideFirebaseAnalyticsFactory.provideFirebaseAnalytics(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

        case 7: // com.google.firebase.crashlytics.FirebaseCrashlytics 
        return (T) FirebaseModule_ProvideFirebaseCrashlyticsFactory.provideFirebaseCrashlytics();

        case 8: // com.example.data.repoistory.chat.ChatRepository 
        return (T) new ChatRepository(singletonC.providePrefsProvider.get(), singletonC.chatDataSourceProvider.get());

        case 9: // com.example.data.datasource.ChatDataSource 
        return (T) new ChatDataSource(singletonC.providerFirebaseDatabaseProvider.get(), singletonC.apiServiceProvider.get(), singletonC.providePrefsProvider.get());

        case 10: // com.google.firebase.database.FirebaseDatabase 
        return (T) FirebaseModule_ProviderFirebaseDatabaseFactory.providerFirebaseDatabase();

        case 11: // com.example.data.notification.ApiService 
        return (T) AppModule_ApiServiceFactory.apiService(singletonC.getRetrofitProvider.get());

        case 12: // retrofit2.Retrofit 
        return (T) AppModule_GetRetrofitFactory.getRetrofit();

        case 13: // com.example.data.repoistory.openai.OpenaiRepository 
        return (T) new OpenaiRepository(singletonC.GptServiceProvider.get());

        case 14: // com.example.data.gpt.GptDataSource 
        return (T) NetworkModule_GptServiceFactory.GptService(singletonC.getRetrofitProvider2.get());

        case 15: // @javax.inject.Named("openai") retrofit2.Retrofit 
        return (T) NetworkModule_GetRetrofitFactory.getRetrofit();

        case 16: // com.example.data.repoistory.contactus.ContactUsRepository 
        return (T) new ContactUsRepository(singletonC.providerFirebaseDatabaseProvider.get(), singletonC.providePrefsProvider.get());

        case 17: // com.example.data.repoistory.dialogregister.DialogRegisterRepository 
        return (T) new DialogRegisterRepository(singletonC.providerDatabaseReferenceProvider.get(), singletonC.providePrefsProvider.get());

        case 18: // com.google.firebase.database.DatabaseReference 
        return (T) FirebaseModule_ProviderDatabaseReferenceFactory.providerDatabaseReference();

        case 19: // com.example.data.repoistory.friends.FriendsRepository 
        return (T) new FriendsRepository(singletonC.friendsDataSource());

        case 20: // com.example.data.repoistory.main.MainRepository 
        return (T) new MainRepository(singletonC.mainDataSource());

        case 21: // com.google.firebase.storage.StorageReference 
        return (T) FirebaseModule_ProvideStorageRefFactory.provideStorageRef();

        case 22: // com.example.data.repoistory.people.PeopleRepository 
        return (T) new PeopleRepository(singletonC.peopleDataSourceProvider.get());

        case 23: // com.example.data.datasource.PeopleDataSource 
        return (T) new PeopleDataSource(singletonC.providerFirebaseDatabaseProvider.get(), singletonC.providePrefsProvider.get());

        case 24: // com.app.di.room.UserDataBase 
        return (T) DataModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), singletonC.callback());

        case 25: // @com.app.di.ApplicationScope kotlinx.coroutines.CoroutineScope 
        return (T) DataModule_ProvideApplicationScopeFactory.provideApplicationScope();

        case 26: // com.example.data.repoistory.request.RequestRepository 
        return (T) new RequestRepository(singletonC.requestDataSource());

        case 27: // com.example.data.repoistory.room.RoomRepo 
        return (T) new RoomRepo(singletonC.providerFirebaseDatabaseProvider.get(), singletonC.roomDataSource());

        case 28: // com.example.data.repoistory.splash.SplashRepository 
        return (T) new SplashRepository(singletonC.firebaseSettingsDataSourceProvider.get(), singletonC.localSettingsDataSourceProvider.get());

        case 29: // com.example.data.repoistory.splash.FirebaseSettingsDataSource 
        return (T) new FirebaseSettingsDataSource(singletonC.providerFirebaseDatabaseProvider.get());

        case 30: // com.example.data.repoistory.splash.LocalSettingsDataSource 
        return (T) new LocalSettingsDataSource(singletonC.providePrefsProvider.get());

        default: throw new AssertionError(id);
      }
    }
  }
}
